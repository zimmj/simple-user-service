openapi: 3.0.3
info:
  title: Simple user API
  description: A simple user API, which does CRUD operations on users. Password is saved in plain text, because it is only a demo.
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: /api/v1

tags:
  - name: users
    description: Users APIs

paths:
  /signIn:
    post:
      description: Sign in a user and return jwt token
      tags:
        - users
      operationId: signIn
      requestBody:
        description: User to sign in into the application
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignIn'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - token
                properties:
                  token:
                    type: string
  /users:
    get:
      description: Returns all users
      tags:
        - users
      operationId: getUsers
      security:
        - bearerAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      description: Creates a new User
      tags:
        - users
      operationId: createUser
      requestBody:
        description: User to object to add to the db
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdReturn'
  /users/{id}:
    get:
      description: Returns a user by id
      tags:
        - users
      operationId: getUserById
      parameters:
        - name: id
          required: true
          in: path
          description: The id of the user
          schema:
            type: string
            format: uuid
      security:
        - bearerAuth: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      description: Updates a own-user by id
      tags:
        - users
      operationId: updateUserById
      parameters:
        - name: id
          required: true
          in: path
          description: The id of the user
          schema:
            type: string
            format: uuid
      requestBody:
        description: User to object to add to the db
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      security:
        - bearerAuth: []
      responses:
        204:
          description: User was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdReturn'
    delete:
      description: Deletes user by id, only the user can do it.
      tags:
        - users
      operationId: deleteOwnUserByID
      parameters:
        - name: id
          required: true
          in: path
          description: The id of own user
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        202:
          description: Delete request was accepted

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      additionalProperties: false
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
          pattern: ^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
    CreateUser:
      type: object
      additionalProperties: false
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
          format: email
          pattern: ^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
        password:
          type: string
          minLength: 8
          format: password
    SignIn:
      type: object
      additionalProperties: false
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          pattern: ^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$
        password:
          type: string
          minLength: 8
          format: password
    IdReturn:
      type: object
      additionalProperties: false
      required:
        - id
      properties:
        id:
          type: string
    Error:
      type: object
      additionalProperties: false
      required:
        - message
      properties:
        message:
          type: string
        type:
          type: string
